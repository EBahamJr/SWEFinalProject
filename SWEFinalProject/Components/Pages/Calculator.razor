@page "/"
@rendermode InteractiveServer

<PageTitle>Calculator</PageTitle>
<center>
    <style>
        .flex-container3{
            padding: 15px;
            margin: 100px 10px;
            width: 25%;
            display: flex;
            justify-content: center;
            align-content: center;
            background-color: white;
            flex-direction: column;
        }
        
        .row {
            display: flex;
        }

        .column {
            padding: 15px 5px;
            justify-content: center;
            align-content: flex-start;
            color: black;
            flex: 50%;
            flex-direction:column;
            justify-self: center;
        }

        .flex-container {
            display: flex;
            justify-content: flex-start;
            align-content: flex-start;
            height: 400px;
            width: 400px;
            background-color: none;
            align-self: flex-start;
        }

        .flex-container2 {
            display: flex;
            justify-content: flex-start;
            align-content: flex-start;
            height: 100px;
            width: 400px;
            background-color: none;
            align-self: flex-start;
        }

        .container{
            display: flex;
            font-weight: bold;
            background-color: #EBEBEB;
            color: #000000;
            justify-content: left;
            width: 100%;
        }

        .container2 {
            display: flex;
            justify-content: left;
            width: 100%;
        }

        .result-container {
            display: flex;
            justify-content: center;
            align-content: center;
            background-color: @CardColor;
            color: @TextColor;
            font-weight: bold;
            width: 100%;
            height: 40px;
        }

        .button {
            border: black;
            color: #FFECD7;
            background-color: #EBEBEB;
            text-align: center;
            text-decoration: solid;
            -webkit-text-fill-color: #000000;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-style: solid;
            border-width: 1px;
            width: 200px;
            border-radius: 3px;
        }

        .inputfield {
            border: black;
            color: #FFECD7;
            text-align: center;
            text-decoration: solid;
            -webkit-text-fill-color: black;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-style: solid;
            border-width: 1px;
            width: 100%;
            border-radius: 3px;
            font-weight: bold;
        }

        .button2 {
            border: black;
            color: #FFECD7;
            text-align: center;
            text-decoration: solid;
            -webkit-text-fill-color: black;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-style: solid;
            border-width: 1px;
            width: 200px;
            border-radius: 3px;
            justify-content: left;
        }

            .button:hover {
                background-color: #04AA6D; /* Green */
                color: white;
            }

        .heading{
            display: flex;
            align-content:center;
            align-self: flex-start;
            font-size: 32px;
            width: inherit;
        }
    </style>
    <div class="flex-container3">
        <h1 class="heading">
            <div class="column">
                <div class="column2">
                    Calculator
                </div>
            </div>
            <div class="column">
                <button type="button2" class="button" value="ClearButton" @onclick="ClearButton">clear</button>
            </div>
        </h1>
        <div class="result-container" value="ResultBox">Result: @resultTxt</div>
        <form>
            <div class="flex-container2">
                <div class="column">
                    <p style="text-align: left;font-weight: bold;">Input A:</p> <input class="inputfield" type="text" id="Anum" name="Anum" @bind="@temp1" @oninput="UpdateNumA">
                </div>
                <div class="column">
                    <p style="text-align: left;font-weight: bold;">Input B:</p> <input class="inputfield" type="text" id="Bnum" name="Bnum" @bind="@temp2" @oninput="UpdateNumB">
                </div>
            </div>
        </form>
        <div class="flex-container">
            <div class="column">
                <div class="label container">A and B</div>
                <button type="button" class="button" @onclick="AdditionButton">A + B</button>
                <button type="button" class="button" @onclick="SubtractionButton">A - B</button>
                <button type="button" class="button" @onclick="MultiplicationButton">A * B</button>
                <button type="button" class="button" @onclick="DivisionButton">A / B</button>
                <button type="button" class="button" @onclick="EquateButton">A == B</button>
                <button type="button" class="button" @onclick="PowButton">A ^ B</button>
                <button type="button" class="button" @onclick="LogButton">A log B</button>
                <button type="button" class="button" @onclick="RootButton">A root B</button>
            </div>
            <div class="column">
                <div class="label container">A only</div>
                <button type="button" class="button" value="AbsoluteValue" @onclick="FactorialButton">A!</button>
                <button type="button" class="button" value="AbsoluteValue" @onclick="SinButton">sin A</button>
                <button type="button" class="button" value="AbsoluteValue" @onclick="CosButton">cos A</button>
                <button type="button" class="button" value="AbsoluteValue" @onclick="TanButton">tan A</button>
                <button type="button" class="button" value="AbsoluteValue" @onclick="InverseButton">1 / A</button>
            </div>
        </div>
    </div>
</center>

@code {
    //string s = Anum.text;

    CalculatorFunctions myOperation = new();

    private string CardColor = "#FFECD7";
    private string TextColor = "#000000";
    //lightgray
    //string s = Anum.string;
    private bool invalid = false;

    private bool bInval = false;
    private bool aInval = false;

    private string resultTxt = "";
    public double result = 0;

    private string temp1 = "";
    private string temp2 = "";

    private double Anum = 0;
    private double Bnum = 0;

    public void ClearButton()
    {
        temp1 = "";
        temp2 = "";
        Anum = 0;
        Bnum = 0;
        resultTxt = "";
        CardColor = "#FFECD7";
        TextColor = "#000000";
    }

    public void UpdateResultTxtAB(string functionSymbol)
    {
        resultTxt = 
        Anum + " " + functionSymbol + " " + Bnum +
        " = " + result;
    }
    public void UpdateResultTxtA(string functionSymbol)
    {
        resultTxt = functionSymbol + " " + Anum + " = " + result;
    }

    public void UpdateNumA(ChangeEventArgs changeEvent)
    {
        temp1 = (string)changeEvent.Value;
        if (temp1 != "")
        {
            aInval = !double.TryParse(temp1, out Anum);
        }
        else
        {
            Anum = 0;
        }
        invalid = aInval || bInval;
    }
    public void UpdateNumB(ChangeEventArgs changeEvent)
    {
        temp2 = (string)changeEvent.Value;
        if (temp2 != "")
        {
            bInval = !double.TryParse(temp2, out Bnum);
        }
        else
        {
            Bnum = 0;
        }
        invalid = aInval || bInval;
    }

    public void SetUpAB()
    {
        CardColor = "lightgray";
        myOperation.SetA(Anum);
        myOperation.SetB(Bnum);
    }
    public void SetUpA()
    {
        CardColor = "lightgray";
        myOperation.SetA(Anum);
    }

    public void invalidEntry()
    {
        resultTxt = "Invalid Entry";
        CardColor = "#B70F0A";
        TextColor = "#FFFFFF";
    }
    public void invalidEntry(string customOut)
    {
        resultTxt = customOut;
        CardColor = "#B70F0A";
        TextColor = "#FFFFFF";
    }

    //A and B function
    private void AdditionButton()//+
    {
        if (!invalid)
        {
            SetUpAB();
            myOperation.CalcAdd();
            result = myOperation.GetResult();
            UpdateResultTxtAB("+");
        }
        else
        {
            invalidEntry();
        }
    }
    private void SubtractionButton()//-
    {
        if (!invalid)
        {
            SetUpAB();
            myOperation.CalcSubtract();
            result = myOperation.GetResult();
            UpdateResultTxtAB("-");
        }
        else
        {
            invalidEntry();
        }
    }
    private void MultiplicationButton()//*
    {
        if (!invalid)
        {
            SetUpAB();
            myOperation.CalcMultiply();
            result = myOperation.GetResult();
            UpdateResultTxtAB("*");
        }
        else
        {
            invalidEntry();
        }
    }
    private void DivisionButton()// /
    {
        if (Bnum != 0)
        {
            if (!invalid)
            {
                SetUpAB();
                myOperation.CalcDivide();
                result = myOperation.GetResult();
                UpdateResultTxtAB("/");
            }
            else
            {
                invalidEntry();
            }
        }
        else
        {
            invalidEntry("Not a Number");
        }
    }
    private void EquateButton()// ==
    {
        if (!invalid)
        {
            SetUpAB();
            myOperation.CalcEquals();
            result = myOperation.GetResult();
            UpdateResultTxtAB("/");
        }
        else
        {
            invalidEntry();
        }
    }

    private void PowButton()// ^
    {
        if (!invalid)
        {
            SetUpAB();
            myOperation.CalcPow();
            result = myOperation.GetResult();
            UpdateResultTxtAB("^");
        }
        else
        {
            invalidEntry();
        }
    }

    private void LogButton()// log
    {
        if (Anum <= 0 || Bnum == 0)
        {
            invalidEntry("Not a Number");
        }
        else
        {
            if (!invalid)
            {
                SetUpAB();
                myOperation.CalcLog();
                result = myOperation.GetResult();
                UpdateResultTxtAB("log");
            }
            else
            {
                invalidEntry();
            }
        }
    }

    private void RootButton()// root
    {
        if (Bnum == 0)
        {
            invalidEntry("Not a Number");
        }
        else
        {
            if (!invalid)
            {
                SetUpAB();
                myOperation.CalcRoot();
                result = myOperation.GetResult();
                UpdateResultTxtAB("root");
            }
            else
            {
                invalidEntry();
            }
        }
    }

    //A only Function

    private void FactorialButton()// !
    {
        if (!invalid)
        {
            SetUpA();
            myOperation.CalcFactorial();
            result = myOperation.GetResult();
            resultTxt = Anum + "! = " + result;
        }
        else
        {
            invalidEntry();
        }
    }

    private void SinButton()// sin
    {
        if (!invalid)
        {
            SetUpA();
            myOperation.CalcSin();
            result = myOperation.GetResult();
            UpdateResultTxtA("sin");
        }
        else
        {
            invalidEntry();
        }
    }

    private void CosButton()// cos
    {
        if (!invalid)
        {
            SetUpA();
            myOperation.CalcCos();
            result = myOperation.GetResult();
            UpdateResultTxtA("cos");
        }
        else
        {
            invalidEntry();
        }
    }

    private void TanButton()// tan
    {
        if (!invalid)
        {
            SetUpA();
            myOperation.CalcTan();
            result = myOperation.GetResult();
            UpdateResultTxtA("tan");
        }
        else
        {
            invalidEntry();
        }
    }

    private void InverseButton()// 1/A
    {
        if (Anum == 0)
        {
            invalidEntry("Not a Number");
        }
        else
        {
            if (!invalid)
            {
                SetUpA();
                myOperation.CalcNegate();
                result = myOperation.GetResult();
                UpdateResultTxtA("1/");
            }
            else
            {
                invalidEntry();
            }
        }
    }
}
